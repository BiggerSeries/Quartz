//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrDeprecatedAPIUsage
evaluationDependsOnChildren()

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

version = "${majorVersion}.${minorVersion}.${patchVersion}"
if (!"${postfix}".isEmpty()) {
    version += "-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        version += ".${postfixMajorVersion}"
        if (!"$postfixMinorVersion".isEmpty()) {
            version += ".${postfixMinorVersion}"
        }
    }
}

group = 'net.roguelogix.quartz'
archivesBaseName = "quartz-${mc_version}"

// allows you to override quartz's forge version, just have to use the same key i use
forge_version = project.rootProject.property("forge_version")

setProperty("compatibility", "[" + version + ", ${majorVersion}." + ("${minorVersion}".toInteger() + 1).toString() + ".${patchVersion}-alpha)")
if (version.contains("alpha") || version.contains("beta")) {
    def nextIncompatibleVersion = "${majorVersion}.${minorVersion}.${patchVersion}-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        nextIncompatibleVersion += "." + ("${postfixMajorVersion}".toInteger() + 1).toString();
    } else {
        nextIncompatibleVersion += ".1"
    }
    setProperty("compatibility", "[" + version + ", " + nextIncompatibleVersion + ")")
}

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=quartz.mixins.json"

            mods {
                Quartz {
                    source sourceSets.main
                }
                Phosphophyllite {
                    source project(':Phosphophyllite').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=quartz.mixins.json"

            mods {
                Quartz {
                    source sourceSets.main
                }
                Phosphophyllite {
                    source project(':Phosphophyllite').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=quartz.mixins.json"
            args '--mod', 'quartz', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                Quartz {
                    source sourceSets.main
                }
                Phosphophyllite {
                    source project(':Phosphophyllite').sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    library
    implementation.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

mixin {
    add sourceSets.main, "quartz.refmap.json"
    config 'quartz.mixins.json'
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly project(':Phosphophyllite')
    library "org.lwjgl:lwjgl-vulkan:3.2.2"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Quartz",
                "Specification-Vendor"    : "BiggerSeries",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "BiggerSeries",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publish.dependsOn('reobfJar')

gradle.projectsEvaluated {
    def resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
    def into_targets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
    def properties = [
            version     : version,
            fml_version  : forge_version.substring(0, forge_version.indexOf('.')),
            forge_version: forge_version,
            mc_version   : mc_version,
            phos_version_range: project.project(":Phosphophyllite").property("compatibility").toString()
    ]
    processResources {
        duplicatesStrategy = 'INCLUDE'
        inputs.properties properties

        def spec = copySpec {
            from(sourceSets.main.resources) {
                include resource_targets
                expand properties
            }
        }

        with spec
        into_targets.each {
            def file = file(it)
            if (file.exists()) {
                copy {
                    with spec
                    into file
                }
            }
        }

        from(sourceSets.main.resources) {
            exclude resource_targets
        }
    }
}