#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer rawLightDataBuffer {
    int rawLightDataSSBO[];
};

layout(location = 0) uniform uvec3 lightChunkBaseTexel;
layout(location = 1) uniform uint rawLightDataBaseInt;

layout(binding = 1) writeonly uniform uimage2DArray intermediateLightDataTexture[6];

struct NeighboringLightLevels {
    uvec2 level[2][2][2];
};

uvec2 lightLeveForPos(uvec3 pos) {
    uint offset = 0;
    offset += pos.x;
    offset *= 18;
    offset += pos.y;
    offset *= 9;
    offset += pos.z >> 1;
    int rawLightData = rawLightDataSSBO[offset];
    rawLightData >>= (16u * (pos.z & 1u));
    uvec2 toRet;
    toRet[0] = (rawLightData >> 8) & 0xFF;
    toRet[1] = rawLightData & 0xFF;
    return toRet;
}

NeighboringLightLevels getNeighboringLighLevels() {
    NeighboringLightLevels levels;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                levels.level[i][j][k] = lightLeveForPos(gl_GlobalInvocationID + uvec3(i, j, k));
            }
        }
    }
    return levels;
}

uvec3 averageValues(uvec2 a, uvec2 b, uvec2 c, uvec2 d) {
    uvec2 ary[4];
    ary[0] = a;
    ary[1] = b;
    ary[2] = c;
    ary[3] = d;
    int validLevels = 0;
    vec2 outputLevel = vec2(0, 0);
    for (int i = 0; i < 4; i++) {
        if (ary[i][0] == 255){
            continue;
        }
        validLevels++;
        outputLevel += ary[i];
    }
    if (validLevels != 0) {
        outputLevel /= float(validLevels);
    }
    barrier();
    return uvec3(outputLevel * 4.0, validLevels);
    //    return uvec2((gl_GlobalInvocationID.xx + vec2(1.0)) * (15.0/17.0) * 4.0);
}

uint packLightAOuint16(uvec3 lightAO) {
    uint packedInt = 0;
    packedInt |= (lightAO.x & 0x3Fu) << 6;
    packedInt |= (lightAO.y & 0x3Fu);
    packedInt |= (lightAO.z & 0x3u) << 12;
    return packedInt;
}

uvec3 unpackLightAOuint16(uint packedInt) {
    uvec3 lightAO;
    packedInt &= 0xFFFFu;
    lightAO.x = (packedInt  >> 6) & 0x3Fu;
    lightAO.y = packedInt & 0x3Fu;
    lightAO.z = (packedInt  >> 12) & 0x3u;
    return lightAO;
}

void main() {
    uvec2 neighborLevels[2][2][2] = getNeighboringLighLevels().level;

    uvec3 outputTexelPos = lightChunkBaseTexel;
    outputTexelPos.x += gl_GlobalInvocationID.x;
    outputTexelPos.y += gl_GlobalInvocationID.y;
    outputTexelPos.y += gl_GlobalInvocationID.z * 17;

    uvec3 outputValues[6];
    outputValues[0] = averageValues(neighborLevels[1][0][0], neighborLevels[1][0][1], neighborLevels[1][1][0], neighborLevels[1][1][1]);
    outputValues[3] = averageValues(neighborLevels[0][0][0], neighborLevels[0][0][1], neighborLevels[0][1][0], neighborLevels[0][1][1]);
    outputValues[1] = averageValues(neighborLevels[0][1][0], neighborLevels[0][1][1], neighborLevels[1][1][0], neighborLevels[1][1][1]);
    outputValues[4] = averageValues(neighborLevels[0][0][0], neighborLevels[0][0][1], neighborLevels[1][0][0], neighborLevels[1][0][1]);
    outputValues[2] = averageValues(neighborLevels[0][0][1], neighborLevels[0][1][1], neighborLevels[1][0][1], neighborLevels[1][1][1]);
    outputValues[5] = averageValues(neighborLevels[0][0][0], neighborLevels[0][1][0], neighborLevels[1][0][0], neighborLevels[1][1][0]);

    for (int i = 0; i < 6; i++) {
        uvec3 toPack = outputValues[i];
        if (toPack.z == 0u){
            // swap with opposite normal if no lighting info is known
            // if both end up swapped, then all 8 blocks are solid, so it doesnt matter
            toPack = outputValues[(i + 3) % 6];
        }
        toPack.z = 4u - toPack.z;
        uint packedLight = packLightAOuint16(toPack);
        imageStore(intermediateLightDataTexture[i], ivec3(outputTexelPos), uvec4(packedLight, 0, 0, 0));
    }
}
